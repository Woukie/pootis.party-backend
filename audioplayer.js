const { PassThrough } = require("stream");
const Throttle = require("throttle");
const fs = require("fs");

class AudioPlayer {
  streams = new Map();

  constructor() {
    this.playFile("./music/Surprise Buttsecks Metal Cover.mp3");
  }

  /**
   * Creates a new stream which passes through data from the currently playing song
   * @example
   * const { id, stream } = generateStream();
   * @returns {{ id: string, stream: PassThrough }} An object containing the id and the created stream.
   */
  openStream() {
    const id = Math.random().toString(36).slice(2);
    const stream = new PassThrough();
    this.streams.set(id, stream);
    return { id: id, stream: stream };
  }

  /**
   * Closes a stream by its id
   * @param id The id of the stream as generated by {@link openStream}
   * @returns {boolean} true if the stream existed, or false if the stream does not exist.
   */
  closeStream(id) {
    return this.streams.delete(id);
  }

  async playFile(filePath) {
    const { parseFile } = await import("music-metadata");
    const fileInfo = await parseFile(filePath);

    const songReadable = fs.createReadStream(filePath);
    const throttleTransformable = new Throttle(fileInfo.format.bitrate / 8);
    songReadable.pipe(throttleTransformable);

    throttleTransformable.on("data", (chunk) => {
      this.broadcastToEveryStreams(chunk);
    });
    throttleTransformable.on("error", (e) => console.log(e));
  }

  broadcastToEveryStreams = (chunk) => {
    for (let [id, stream] of this.streams) {
      stream.write(chunk);
    }
  };
}

const singletonInstance = new AudioPlayer();

Object.freeze(singletonInstance);

module.exports = singletonInstance;
